#BlueJ class context
comment0.target=List
comment0.text=\r\n\ A\ List\ encapsulates\ a\ list\ of\ Objects,\ such\ as\ String,\ etc.\r\n\ \r\n\ A\ List\ is\ created\ to\ have\ both\ a\ top\ dummy\ Node\ and\ a\ bottom\ dummy\ Node.\r\n\ Cursor\ is\ initialized\ to\ match\ the\ top\ field.\ \r\n\ \r\n\ The\ end\ field\ is\ always\ a\ reference\ to\ the\ bottom\ dummy\ Node.\r\n\ \r\n\ The\ convention\ that\ is\ implemented\ by\ this\ List\ structure\ goes\ as\ follows.\ \r\n\ For\ each\ value\ of\ the\ cursor\ field,\ \r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ cursor\r\n\ \r\n\ the\ data\ are\ stored\ in\ the\ next\ Node,\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ cursor.next.data\r\n\ \r\n\ -----------------------------------------\r\n\ \ \ \ \ An\ empty\ list\r\n\ Below,\ cursor\ \=\ top,\ i.e.\ the\ cursor\ index\ is\ 0\r\n\ \r\n\ top.prev\ (cursor.next)\ \ \ null\r\n\ top.data\ (cursor.next)\ \ \ dummy\r\n\ top.next\ (cursor.next)\ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ end.prev\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ backward\r\n\ end.data\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ dummy\r\n\ end.next\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\r\n\ \r\n\ \r\n\ \r\n\ -----------------------------------------\r\n\ \ \ \ \ A\ list\ of\ 1\ element\r\n\ Below,\ cursor\ \=\ top,\ i.e.\ the\ cursor\ index\ is\ 0\r\n\ \r\n\ top.prev\ (cursor.next)\ \ \ null\r\n\ top.data\ (cursor.next)\ \ \ dummy\r\n\ top.next\ (cursor.next)\ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ cursor.next.prev\ \ \ \ \ \ \ \ \ links\ backward\r\n\ cursor.next.data\ \ \ \ \ \ \ \ \ "one"\r\n\ cursor.next.next\ \ \ \ \ \ \ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ end.prev\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ backward\r\n\ end.data\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ dummy\r\n\ end.next\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\r\n\ \r\n\ -------------------------------------------\r\n\ \ \ \ \ A\ list\ of\ 2\ elements\r\n\ Below,\ cursor\ \=\ top.next,\ i.e.\ the\ cursor\ index\ is\ 1\r\n\ \r\n\ top.prev\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\r\n\ top.data\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ dummy\r\n\ top.next\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ cursor.prev\ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ backward\r\n\ cursor.data\ \ \ \ \ \ \ \ \ \ \ \ \ \ "one"\r\n\ cursor.next\ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ cursor.next.prev\ \ \ \ \ \ \ \ \ link\ backward\r\n\ cursor.next.data\ \ \ \ \ \ \ \ \ "two"\r\n\ cursor.next.next\ \ \ \ \ \ \ \ \ link\ forward\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ end.prev\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ link\ backward\r\n\ end.data\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ dummy\r\n\ end.next\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\r\n\ \r\n\ -------------------------------------------\r\n\ \r\n\ For\ the\ initial\ cursor\ value,\ an\ item\ will\ be\ entered\ in\ the\r\n\ 0th\ position\ in\ the\ list.\ Unless\ the\ cursor\ is\ changed,\ a\ \r\n\ subsequent\ item\ will\ be\ entered\ still\ in\ the\ 0th\ position,\ \r\n\ where\ each\ existing\ item\ in\ the\ list\ will\ be\ demoted\ by\ one\ place.\r\n\ \r\n
comment1.params=
comment1.target=List()
comment1.text=\r\n\ Invokes\ the\ other\ constructor.\r\n
comment10.params=
comment10.target=void\ cursorToEnd()
comment10.text=\r\n\ Moves\ the\ cursor\ to\ the\ end\ of\ the\ list,\ which\ is\ at\ \r\n\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this.end.prev.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ No\ element\ is\ ever\ at\ the\ end\ of\ the\ list.\ Whenever\ an\ element\r\n\ is\ added\ to\ the\ end\ of\ the\ list,\ it\ becomes\ the\ last\ element.\r\n
comment11.params=
comment11.target=boolean\ cursorIsLast()
comment11.text=\r\n\ Returns\ whether\ the\ cursor\ points\ to\r\n\ the\ last\ occupied\ location\ in\ the\ list\r\n
comment12.params=
comment12.target=void\ cursorToLast()
comment12.text=\r\n\ Moves\ the\ cursor\ to\ the\ Node\ immediately\ preceding\ the\r\n\ trailing\ Node\ of\ the\ list.\r\n\ \r\n\ No\ element\ is\ ever\ at\ the\ end\ of\ the\ list.\ Whenever\ an\ element\r\n\ is\ added\ to\ the\ end\ of\ the\ list,\ it\ becomes\ the\ last\ element.\r\n
comment13.params=
comment13.target=java.lang.Object\ getLast()
comment13.text=\r\n\ Returns\ the\ last\ element\ in\ the\ list.\r\n
comment14.params=
comment14.target=boolean\ cursorHasNext()
comment14.text=\r\n\ Returns\ whether\ the\ list\ stores\ a\ next\ item.\r\n
comment15.params=
comment15.target=void\ cursorToNext()
comment15.text=\r\n\ Advances\ the\ cursor\ to\ the\ next\ place\ in\ the\ list.\r\n
comment16.params=
comment16.target=java.lang.Object\ getNext()
comment16.text=\r\n\ Returns\ the\ current\ object,\ and\ advances\ the\ cursor.\r\n
comment17.params=
comment17.target=boolean\ cursorHasPrevious()
comment17.text=--------------------------
comment18.params=
comment18.target=void\ cursorToPrevious()
comment18.text=\r\n\ Backs\ up\ the\ cursor\ to\ the\ previous\ place\ in\ the\ list.\r\n
comment19.params=index\ obj
comment19.target=void\ add(int,\ java.lang.Object)
comment19.text=\r\n\ Inserts\ a\ Node\ for\ the\ element\ in\ the\ specified\ index\ place.\r\n
comment2.params=title
comment2.target=List(java.lang.String)
comment2.text=\r\n\ Constructs\ the\ list\ with\ two\ dummy\ Nodes,\ \r\n\ one\ Node\ to\ always\ lead\ the\ list,\ and\ a\r\n\ second\ Node\ to\ always\ trail\ the\ list.\r\n\ \r\n\ The\ lead\ node\ contains\ the\ title;\r\n
comment20.params=obj
comment20.target=void\ add(java.lang.Object)
comment20.text=\r\n\ inserts\ a\ Node\ for\ the\ element\ immediately\ after\ the\ Node\r\n\ referenced\ by\ cursor.\ \ The\ value\ of\ cursor\ does\ not\ change\!\r\n
comment21.params=index\ c
comment21.target=void\ addAll(int,\ List)
comment21.text=\r\n\ \r\n
comment22.params=obj
comment22.target=void\ prefix(java.lang.Object)
comment22.text=\r\n\ Inserts\ a\ Node\ for\ the\ element\ immediately\ after\ the\ top\r\n\ dummy\ node\ to\ top\ the\ list.\r\n
comment23.params=obj
comment23.target=void\ append(java.lang.Object)
comment23.text=\r\n\ No\ element\ is\ ever\ at\ the\ end\ of\ the\ list.\ Whenever\ an\ element\r\n\ is\ added\ to\ the\ end\ of\ the\ list,\ it\ becomes\ the\ last\ element.\r\n\r\n\r\n\ This\ append\ method\ inserts\ a\ Node\ for\ the\ element\ at\ the\ end\ of\r\n\ the\ list,\ which,\ physically,\ will\ immediately\ come\ before\ the\r\n\ end\ (dummy)\ node.\r\n
comment24.params=obj
comment24.target=void\ set(java.lang.Object)
comment24.text=\r\n\ This\ set\ method\ replaces\ the\ object,\ obj,\ to\ the\ current.next\r\n\ node\ data\ field.\r\n
comment25.params=index\ obj
comment25.target=void\ set(int,\ java.lang.Object)
comment25.text=\r\n\ If\ index\ is\ a\ legitimate\ list\ position,\ this\ set\ method\ \r\n\ moves\ the\ cursor\ to\ the\ specified\ index\ position,\ before\r\n\ invoking\ the\ set\ Object\ method\ to\ complete\ the\ object\r\n\ replacement.\r\n
comment26.params=obj
comment26.target=int\ indexOf(java.lang.Object)
comment26.text=\r\n\ Returns\ the\ index\ of\ temp\ in\ the\ list\ for\ a\ first\ occurrence;\r\n\ or\ -1\ if\ temp\ is\ not\ contained\ in\ the\ list.\r\n\ \r\n
comment27.params=obj
comment27.target=int\ lastIndexOf(java.lang.Object)
comment27.text=\r\n\ Returns\ the\ index\ of\ obj\ for\ its\ last\ occurrence\ in\ the\ list\ ;\r\n\ or\ -1\ if\ obj\ is\ not\ contained\ in\ the\ list.\r\n\ \r\n\ contains\ ?\r\n
comment28.params=
comment28.target=java.lang.Object\ get()
comment28.text=\r\n\ The\ get\ method\ returns\ the\ item,\ cursor.next.getData()\r\n
comment29.params=index
comment29.target=java.lang.Object\ get(int)
comment29.text=\r\n\ get\ moves\ the\ cursor\ to\ the\ specified\ index\ position,\ \r\n\ and\ then\ invokes\ get()\ to\ return\ the\ item.\r\n
comment3.params=title
comment3.target=void\ setTitle(java.lang.String)
comment30.params=
comment30.target=int\ getIndex()
comment30.text=\r\n\ Returns\ the\ index\ for\ the\ cursor\ position\ in\ the\ list.\r\n
comment31.params=index
comment31.target=void\ cursorToIndex(int)
comment31.text=\r\n\ Changes\ the\ cursor\ to\ reference\ the\ Node\ specified\ by\ the\ index\ parameter.\r\n
comment32.params=start\ stop
comment32.target=List\ subList(int,\ int)
comment32.text=\r\n\ Returns\ a\ sub-list\ of\ elements\ from\ start\ to\ stop\ in\ this\ list.\r\n\ Elements\ in\ the\ returned\ sub-list\ are\ shared\ by\ this\ list.\r\n
comment33.params=j\ k
comment33.target=void\ swap(int,\ int)
comment33.text=\r\n\ Swaps\ two\ elements\ in\ the\ list,\ the\ element\ at\ index\ j\r\n\ with\ the\ element\ at\ index\ k.\r\n
comment34.params=
comment34.target=void\ reverse()
comment34.text=\r\n\ Reverses\ the\ order\ of\ the\ list.\r\n
comment35.params=
comment35.target=java.lang.Object\ remove()
comment35.text=\r\n\ Returns\ the\ value,\ curror.next.data,\ and\ re-links\ the\ list\ to\ exclude\r\n\ the\ node\ that\ contained\ the\ data.\ \ The\ value\ of\ cursor\ does\ not\ change\!\r\n\ \r\n\ @return\r\n\ @throws\ Exception\r\n
comment36.params=index
comment36.target=java.lang.Object\ remove(int)
comment36.text=\r\n\ First\ moves\ the\ cursor\ to\ the\ index\ specified\ location\ in\ the\ list,\r\n\ and\ then\ calls\ this.remove\ to\ remove\ and\ return\ the\ value.\r\n\ @return\r\n\ @throws\ Exception\r\n
comment37.params=
comment37.target=void\ clearAll()
comment37.text=\r\n\ Empties\ the\ list.\r\n
comment38.params=
comment38.target=int\ size()
comment38.text=\r\n\ Returns\ a\ count\ of\ how\ many\ elements\ are\ contained\ within\ the\ list.\r\n
comment39.params=
comment39.target=java.lang.String\ toString()
comment39.text=\r\n\ Returns\ a\ string\ for\ all\ of\ the\ elements\ in\ the\ list\ from\ \r\n\ top\ to\ bottom.\r\n
comment4.params=
comment4.target=java.lang.String\ getTitle()
comment40.params=start\ stop
comment40.target=java.lang.String\ display(int,\ int)
comment40.text=\r\n\ Returns\ a\ string\ for\ the\ elements\ in\ the\ list\ \r\n\ indexed\ between\ start\ and\ stop,\ inclusively.\r\n
comment41.params=args
comment41.target=void\ main(java.lang.String[])
comment41.text=\r\n\ \r\n\ \r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Returns\ whether\ the\ list\ is\ empty.\r\n
comment6.params=
comment6.target=boolean\ cursorIsFirst()
comment6.text=\r\n\ Returns\ whether\ the\ cursor\ points\ to\r\n\ the\ 0th\ location\ in\ the\ list\r\n
comment7.params=
comment7.target=void\ cursorToFirst()
comment7.text=\r\n\ Moves\ the\ cursor\ to\ the\ top,\ so\ that\ the\ first\ item\ in\ the\r\n\ list\ is\ dereferenced\ as\ cursor.next.data\r\n
comment8.params=
comment8.target=java.lang.Object\ getFirst()
comment8.text=\r\n\ Returns\ the\ first\ element\ in\ the\ list,\ i.e.\ this.get(\ 0\ )\r\n
comment9.params=
comment9.target=boolean\ cursorIsAtTheEnd()
comment9.text=\r\n\ Returns\ whether\ the\ cursor\ points\ to\r\n\ the\ end\ of\ the\ list,\ i.e.\ the\ location\r\n\ for\ appending\ an\ item\ to\ the\ list.\r\n
numComments=42
